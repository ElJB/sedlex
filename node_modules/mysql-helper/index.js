var mysql = require('mysql'),
	Q = require('q');

function mysqlHelper(settings){
	this.settings = settings;
	this.connection = mysql.createConnection(this.settings);
};

mysqlHelper.prototype.query = function query(tableName, projection, selection, selectionArgs){
	if( projection ){
		var sql = "SELECT ?? FROM ??";
		var queryString = mysql.format(sql, [projection, tableName]);
	} else {
		var sql = "SELECT * FROM ??";
		var queryString = mysql.format(sql, [tableName]);
	}

	if( selection ){
		sql = " WHERE " + selection;
		queryString += mysql.format(sql, selectionArgs);
	}

	return this.execSQL(queryString);
}

mysqlHelper.prototype.execSQL = function execSQL(queryString){
	var deferred = Q.defer();

	debug(queryString);

	this.connection.query(queryString, function queryCb(err, rows, fields){
		if(err){ return deferred.reject(err)}
		deferred.resolve([rows, fields]);
	});

	return deferred.promise;
}

mysqlHelper.prototype.insert = function insert(tableName, columns, data){
	var queryString = "INSERT INTO ?? (??) VALUES (?)";
	queryString = mysql.format(queryString, [tableName, columns, data]);
	return this.execSQL(queryString);
}

mysqlHelper.prototype.upsert = function upsert(tableName, columns, data){
	var queryString = "INSERT INTO ?? (??) VALUES (?) ON DUPLICATE KEY UPDATE ";
	queryString = mysql.format(queryString, [tableName, columns, data]);

	for( i in columns ){
		queryString += columns[i] + " = " + mysql.escape(data[i]) + ", ";
	}
	queryString = queryString.slice(0, queryString.length-2);

	return this.execSQL(queryString);
}

mysqlHelper.prototype.update = function update(tableName, columns, value, selection, selectionArgs){
	var sql = "UPDATE ?? SET "
	var queryString = mysql.format(sql, [tableName]);
	for( i in columns ){
		queryString += columns[i] + " = " + mysql.escape(value[i]) + ", ";
	}
	queryString = queryString.slice(0, queryString.length-2);
	
	if( selection ){
		sql = " WHERE " + selection;
		queryString += mysql.format(sql, selectionArgs);
	}

	return this.execSQL(queryString);
}

mysqlHelper.prototype.delete = function del(tableName, selection, selectionArgs){
	var sql = "DELETE FROM ?? WHERE ";
	var queryString = mysql.format(sql, [tableName]) + mysql.format(selection, selectionArgs);

	return this.execSQL(queryString);
}

function Contract(source){
	for( key in source ){
		this[key] = source[key];
	}
}

mysqlHelper.prototype.Contract = Contract;

Contract.prototype.getColumns = function(){
	return this.columns.filter(function(e){
		return e.type.match(/SERIAL/) == null;
	}).map(function(e){
		return e.name;
	});
}

Contract.prototype.createTableString = function(){
	var queryString = "CREATE TABLE " + this.tableName + " (";
	for( i in this.columns ){
		queryString += this.columns[i].name + " " + this.columns[i].type + ", "; 
	}
	if( "constraint" in this && "unique" in this.constraint ){
		queryString += "UNIQUE (";
		for( i in this.constraint.unique ){
			queryString += this.constraint.unique[i] + ", ";
		}
		queryString = queryString.substring(0, queryString.length - 2) + "), ";
	}
	if( "constraint" in this && "foreignKey" in this.constraint ){
		queryString += "FOREIGN KEY (";
		for( i in this.constraint.foreignKey.key ){
			queryString += this.constraint.foreignKey.key[i] + ", ";
		}
		queryString = queryString.substring(0, queryString.length - 2) + ") REFERENCES ";
		queryString += this.constraint.foreignKey.referenceTable + "(";
		for( i in this.constraint.foreignKey.referenceKeys ){
			queryString += this.constraint.foreignKey.referenceKeys[i] + ", ";
		}
		queryString = queryString.substring(0, queryString.length - 2) + "), ";
	}
	if( "constraint" in this && "primaryKey" in this.constraint ){
		queryString += "PRIMARY KEY (";
		for( i in this.constraint.primaryKey ){
			queryString += this.constraint.primaryKey[i] + ", ";
		}
		queryString = queryString.substring(0, queryString.length - 2) + "), ";
	}
	queryString = queryString.substring(0, queryString.length - 2) + ")";

	return queryString;
}

function debug(e){
	if( process.env.DEBUG ){
		console.log(e);
	}
}

module.exports = mysqlHelper;